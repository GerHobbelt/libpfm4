.TH LIBPFM 4  "September, 2009" "" "Linux Programmer's Manual"
.SH NAME
pfm_get_nevents, pfm_get_event_first, pfm_get_event_next \- iterate over events
.SH SYNOPSIS
.nf
.B #include <perfmon/pfmlib.h>
.sp
.BI "int pfm_get_nevents("void ");"
.BI "int pfm_get_event_first("void ");"
.BI "int pfm_get_event_next(int "idx ");"
.sp
.SH DESCRIPTION
Events are uniquely identified with opaque integer identifiers.
There is no guaranteed order within identifiers. Thus, to list 
all the events, it is necessary to use iterators.

Events are grouped in tables within the libary. A table usually
corresponds to a PMU model or family. The library contains support
for multiple PMU models, thus it has multiple tables. Based on the
host hardware and software environments, tables get activated when
the library is initialized via \fBpfm_initialize()\fR. Events from
activated tables are called active events. Events from
non-activated tables are called supported events.

The \fBpfm_get_event_first()\fR function returns the identifier
for the first supported event. A supported event may not be usable
on the host hardware. The identifier returned by the function can
be used to retrieve information about the event with
\fBpfm_get_event_info()\fR. It is possible to check if the event is
active, i.e., supported by the host PMU model, by retrieving information
about the PMU the event is associated with via \fBpfm_get_pmu_info\fR
using the pmu field in the \fBpfm_event_info\fR structure. This is
demonstrated in the example below.

The \fBpfm_get_event_next()\fR function returns the identifier of
next supported event after the one passed \fBidx\fR.

The \fBpfm_get_nevents()\fR function returns the total number
of events supported by the library. In case multiple PMU models
are activated, this number represents the sum of all events from
all the supported event tables. This is an upper bound, the actual
number of events may be lower.

Using the \fBpfm_get_event_first()\fR and \fBpfm_get_event_next()\fR
functions, it is possible to iterate over all supported or available
events. The iterator \fBpfm_for_each_event()\fR list all events supported
by the library.
.sp
.nf
void list_events(void)
{
   struct pfm_event_info info;
   struct pfm_pmu_info pinfo;
   int i, ret, present;

   memset(&info, 0, sizeof(info));
   memset(&pinfo, 0, sizeof(pinfo));

   info.size = sizeof(info);
   pinfo.size = sizeof(pinfo);

   pfm_for_each_event(i) {
      ret = pfm_get_event_info(i, &info);
      if (ret != PFM_SUCCESS)
        errx(1, "cannot get event info");

      ret = pfm_get_pmu_info(info.pmu, &pinfo);
      if (ret != PFM_SUCCESS)
        errx(1, "cannot get pmu info");

        printf("%s Event: %s::%s\\n",
               pinfo.present ? "Active" : "Supported",
               pinfo.name, info.name);
  }
}
.fi

.SH RETURN
The \fBpfm_get_event_first()\fR function returns the identifier of the first
supported event. It returns -1 in case none is available.

The \fBpfm_get_event_next()\fR function returns the identifier of the next
supported event. It returns -1 in case the provided identifier
points to the last supported event.

The \fBpfm_get_nevents()\fR function returns the number of supported
events. If no event is supported, \fB0\fR is returned.

.SH ERRORS
No error code, besides -1, is returned by any of these functions.
.SH SEE ALSO
pfm_find_event(3)
.SH AUTHOR
Stephane Eranian <eranian@gmail.com>
.PP
