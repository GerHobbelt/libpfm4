.TH LIBPFM 4  "September, 2009" "" "Linux Programmer's Manual"
.SH NAME
pfm_get_pmu_name, pfm_get_pmu_desc, pfm_pmu_present \- query PMU information
.SH SYNOPSIS
.nf
.B #include <perfmon/pfmlib.h>
.sp
.BI "const char *pfm_get_pmu_name(pfm_pmu_t "pmu ");"
.BI "const char *pfm_get_pmu_desc(pfm_pmu_t " pmu ");"
.BI "int pfm_pmu_present(pfm_pmu_t " pmu ");"
.sp
.SH DESCRIPTION
These functions retrieve information about the PMU model specified
in \fBpmu\fR. The value of \fBpmu\fR must be between 0 and \fBPFM_PMU_MAX\fR.

To call those functions, the library must have been initialized properly with
a call to \fBpfm_initialize()\fR.

The library may support more PMU models than those which were activated
during initialization. The functions in the synopsis can be invoked on
any supported PMU models.

Each PMU model has a name and a description and an identifier. The name
can be used as a prefix when specifying events. It is always composed of
a  single word, no dash, no underbar.  The description may contain multiple
words and may be dynamically generated by the library. The identifier is
unique and constant and is of type \fBpfm_pmu_t\fR.

The \fBpfm_get_pmu_name()\fR function returns the name of the PMU
corresponding to the \fBpmu\fR identifier. The returned string is
read-only.

The \fBpfm_get_pmu_desc()\fR function returns the description of the
PMU corresponding to the \fBpmu\fR identifier. The returned string is
read-only.

The \fBpfm_pmu_present()\fR function is used to check whether or not
a specific PMU model is present, i.e., has been detected and
activated successfully. 

.sp
.SH EXAMPLES
To list the PMU models supported by the library, the following loop could be used:
.sp
.nf
#include <inttypes.h>
#include <err.h>
#include <perfmon/pfmlib.h>
int main(int argc, char **argv)
{
	const char *name;
	int i, ret;

	ret = pfm_initialize();
	if (ret != PFMLIB_SUCCESS)
		err(1", cannot initialize library %s", pfm_strerror(ret));

	printf("Supported PMU models:\\n");
	for(i=0; i < PFM_PMU_MAX; i++) {
		name = pfm_get_pmu_name(i);
		if (!name)
			continue;

		printf("\\t[%d, %s, \\"%s\\"]\n", i, pfm_get_pmu_name(i), pfm_get_pmu_desc(i));
	}

}
.fi
.sp
To list the PMU models which have been detected on the host, the loop can
be modified as follows:
.sp
.nf
#include <inttypes.h>
#include <err.h>
#include <perfmon/pfmlib.h>
int main(int argc, char **argv)
{
	const char *name;
	int i, ret;

	ret = pfm_initialize();
	if (ret != PFMLIB_SUCCESS)
		err(1", cannot initialize library %s", pfm_strerror(ret));

	printf("Detected PMU models:\\n");
	for(i=0; i < PFM_PMU_MAX; i++) {
		if (pfm_pmu_present(i))
			printf("\\t[%d, %s, \\"%s\\"]\n", i, pfm_get_pmu_name(i), pfm_get_pmu_desc(i));
	}

}
.fi


.SH PMU identifiers

The following PMU identifiers are defined:
.TP
.B PFM_PMU_NONE
No PMU. This is used by calls returning a \fBpfm_pmu_t\fR value.
.TP
.B PFM_PMU_GEN_IA64
The architected Intel Itanium PMU. This is the generic Intel Itanium.
PMU
.TP
.B PFM_PMU_ITANIUM
The Intel Itanium processor PMU model. The model is found in the first
implementation of the IA-64 architecture, code name Merced.
.TP
.B PFM_PMU_ITANIUM2
The Intel Itanium 2 processor PMU model. This is the model provided
by McKinley, Madison, and Deerfield processors.
.TP
.B PFM_PMU_MONTECITO
The Intel Dual-Core Itanium 2 processor PMU model (code name Montecito, Montvale).
.TP
.B PFM_PMU_AMD64
The AMD AMD64 processors (family 6, 15, and 16)
.TP
.B PFM_PMU_I386_P6
The Intel P6 core processor. That includes Intel Pentium III processors, but excludes Pentium M.
.TP
.B PFM_PMU_PENTIUM4
The Intel processors based on Netburst micro-architecture. That includes Pentium 4 and some Xeon processsors.
.TP
.B PFM_PMU_COREDUO
The Intel Core Duo and Core Solo processors based on Yonah micro-architecture.
.TP
.B PFM_PMU_I386_PM
The Intel Pentium M processor.
.TP
.B PFM_PMU_INTEL_CORE
The Intel processors based on the Core micro-architecture. That includes Intel Core 2 Duo/Quad processors.
.TP
.B PFM_PMU_INTEL_PRRO
The Intel Pentium Pro processor.
.TP
.B PFM_PMU_INTEL_PII
The Intel Pentium II processor.
.TP
.B PFM_PMU_INTEL_ATOM
The Intel Atom processor.
.TP
.B PFM_PMU_INTEL_NHM
The Intel processors based on the Nehalem micro-architecture. That includes the Intel Core i7 series.
.TP
.B PFM_PMU_INTEL_NHM_UNC
The uncore PMU of the Intel Nehalem-based processors, such as Intel Core i7 and Intel Core i5.
.TP
.B PFM_PMU_INTEL_X86_ARCH
The Intel architected PMU version 1, 2, 3. It is found on recent processors starting with Intel Core Duo/Solo.
.TP
.B PFM_PMU_MIPS_20KC
MIPS 20KC  processors.
.TP
.B PFM_PMU_MIPS_24K
MIPS 24K processors.
.TP
.B PFM_PMU_MIPS_25KF
MIPS 25KF processors.
.TP
.B PFM_PMU_MIPS_34K
MIPS 34K processors.
.TP
.B PFM_PMU_MIPS_5KC
MIPS 5KC processors.
.TP
.B PFM_PMU_MIPS_74K
MIPS 74K  processors.
.TP
.B PFM_PMU_MIPS_R10000
MIPS R10000 processors.
.TP
.B PFM_PMU_MIPS_R12000
MIPS R12000 processors.
.TP
.B PFM_PMU_MIPS_RM7000
MIPS RM7000 processors.
.TP
.B PFM_PMU_MIPS_RM9000
MIPS RM9000 processors.
.TP
.B PFM_PMU_MIPS_SB1
MIPS SB1/SB1A processors.
.TP
.B PFM_PMU_MIPS_VR5432
MIPS VR5432 processors.
.TP
.B PFM_PMU_MIPS_VR5500
MIPS VR5500 processors.
.TP
.B PFM_PMU_MIPS_ICE9A
SiCortex ICE9A
.TP
.B PFM_PMU_MIPS_ICE9B
SiCortex ICE9B
.TP
.B PFM_PMU_POWERPC
IBM POWERPC processors.
.TP
.B PFM_PMU_CRAYX2
Cray X2  processors.
.TP
.B PFM_PMU_CELL
IBM Cell processors.
.TP
.B PFM_PMU_PPC970
IBM PowerPC 970(FX,GX) processors
.TP
.B PFM_PMU_PPC970MP
IBM PowerPC 970MP processors
.TP
.B PFM_PMU_POWER3
IBM POWER3  processors
.TP
.B PFM_PMU_POWER4
IBM POWER4 processors
.TP
.B PFM_PMU_POWER5
IBM POWER5 processors
.TP
.B PFM_PMU_POWER5p
IBM POWER5+ processors
.TP
.B PFM_PMU_POWER6
IBM POWER6 processors
.TP
.B PFM_PMU_POWER7
IBM POWER7 processors
.TP
.B PFM_PMU_SPARC_ULTRA12
Sun UltraSPARC I, II, IIi and IIe processors.
.TP
.B PFM_PMU_SPARC_ULTRA3
Sun UltraSPARC III processors.
.TP
.B PFM_PMU_SPARC_ULTRA3I
Sun UltraSPARC IIIi and IIIi+ processors.
.TP
.B PFM_PMU_SPARC_ULTRA3PLUS
Sun UltraSPARC III+ and IV processors.
.TP
.B PFM_PMU_SPARC_ULTRA4PLUS
Sun UltraSPARC IV+ processors.
.TP
.B PFM_PMU_SPARC_NIAGARA1
Sun Niagra-1 processors.
.TP
.B PFM_PMU_SPARC_NIAGARA2
Sun Niagra-2 processors.
.TP
.B PFM_PMU_PERF_EVENT
The perf_event generic hardware and software events, including tracepoints.

.SH RETURN
The \fBpfm_get_pmu_desc()\fR and \fBpfm_get_pmu_name()\fR functions return a read-only
string or NULL in case of error.

The \fBpfm_pmu_present()\fR function returns \fB1\fR in case the specified PMU is activated,
and \fB0\fR otherwise.

.SH ERRORS
See above.
.SH AUTHOR
Stephane Eranian <eranian@gmail.com>
.PP
